<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | What hwat?]]></title>
  <link href="http://hiroaki.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://hiroaki.github.io/"/>
  <updated>2016-02-14T14:48:59+09:00</updated>
  <id>http://hiroaki.github.io/</id>
  <author>
    <name><![CDATA[hiroaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Teng-Plugin-QueryBuilder]]></title>
    <link href="http://hiroaki.github.io/blog/2016/0214/teng-plugin-querybuilder/"/>
    <updated>2016-02-14T14:47:34+09:00</updated>
    <id>http://hiroaki.github.io/blog/2016/0214/teng-plugin-querybuilder</id>
    <content type="html"><![CDATA[<p>Perl の ORM の代表的なひとつである <a href="http://search.cpan.org/dist/Teng/">Teng</a> は <a href="http://search.cpan.org/dist/DBIx-Skinny/">DBIx::Skinny</a> の後継にあたりますが、 DBIx::Skinny にあった <code>resultset</code> に当たる機能が Teng に無いので、 Teng プラグインとして移植したという話です。</p>

<p><a href="https://github.com/hiroaki/Teng-Plugin-QueryBuilder">Teng-Plugin-QueryBuilder</a></p>

<!-- more -->


<h2>モチベーション</h2>

<p>気がつけばもう４、５年くらい使っている、個人趣味のための Web インタフェースのツールがあるのですが、最初から適当に機能を拡張していったツケが溜まり溜まって、もはや拡張不能なくらいコードがスパゲッティになってしまっていました。手元のディレクトリでは、リポジトリにコミットしていない宙ぶらりんのファイルの散らかりが、 &ldquo;行き詰まった&rdquo; 感を無力に物語っています。</p>

<p>それでも必要なので使っているしこれからも使うつもりなのですが、使っているからにはやはり改良のアイデアがちょこちょこ出てきます。でも、直せない。直せないので、使うたびにイライラが募ります。この状況が健康に良くないのは明らかですから、じゃあ書きなおそうかと思い立ったのが──いつだったか。しかし最近モチベーションが少し上がってきたので、少しづつ手を動かし始めた次第です。</p>

<p>そのツールは外部に公開しないサイトなので、いたる所じゆうです。 WAF は Mojolicious を使って書いていました。 ORM には DBIx::Skinny 。 DBIx::Skinny にしたことに理由は特に無く、当時、仕事の関係で <a href="http://search.cpan.org/dist/DBIx-Class/">DBIx::Class</a> に辟易していたじぶんはもっとシンプルな、手軽なものがいいなと思っていたところでしたから、しぜんなチョイスだったことと思います。日本語のチュートリアルがあったのも、そして全体像が把握しきれる大きさだったのも、食指を動かす動機になったと思います。</p>

<p>そのツールを作り直すに当たって、 DBIx::Skinny については Teng に置き換えることになります。──当たり前のように述べましたが、その作者自身が DBIx::Skinny に行き詰まりを感じて書き直したのが Teng なので（ですよね？）、つまりその後 DBIx::Skinny はメンテされなくなることが予見できたので、将来性のあるほうを選択することに躊躇う余地はありませんでした。（実際、 DBIx::Skinny は最後のリリースが 2011 年 9 月です。）</p>

<h2>課題</h2>

<p>ところがいざ移植作業を始めてみると、すぐに課題に突き当たりました。</p>

<p>Teng は DBIx::Skinny の API をすべて受け継いでいるわけではありません。いわゆる単純な CRUD については問題無いのですが、じぶんのツールでは <code>resultset</code> メソッドが提供するクエリ・ビルダを多用していたのですが、まずこれがありません。また Teng は JOIN をサポートしておらず、これもじぶんでなんとかしなければなりません。などなど。</p>

<p>もちろん Teng の設計ポリシーとしてそれらは事前に覚悟されることではありましたが、いざその場面に直面した時、選択肢としてあるだろうひとつとして SQL の直書き、そしてもうひとつの希望として、プラグインの存在に思いが馳せます。</p>

<p>前者はやりたくないので（そのための ORM ですし）それは最終手段として、さてプラグインを探してみると、 <a href="http://search.cpan.org/dist/Teng-Plugin-ResultSet/">Teng::Plugin::ResultSet</a> という、その名もずばりのものがありました。──が、そう思ったのもつかの間、これはまったく別の代物でした。正直何のためのものかわかりませんでしたが、とにかく違うことは明らかでしたので、ほかを当たらなければなりません。しかし、見つかりません。なければ、──じぶんで書くほかないということになります。</p>

<p>ただ、あまり手間をかけたくない、一から書こうとするには &ldquo;軽量 ORM&rdquo; として釣り合いが取れないのでは無いか、ということもあり、いったんは DBIx::Skinny に戻ろうかとも考えました。そこで思いついたのが、 DBIx::Skinny のソースから <code>resultset</code> だけ移植ができないか、ということです。</p>

<h2>実装</h2>

<p>中身を見てみると、さいわいなことに見通しが得られました。 <code>resultset</code> は、 SQL を部分部分で組み立てながら最終的に &ldquo;生 SQL&rdquo; の文字列を生成するだけで、とくに DBIx::Skinny のインスタンスに頼っている部分も無く、これをそのまま持っていければ、 Teng でも使えそうでした。ならば物は試しでと、中身を詳しく精査することもせずに、メソッドの部分のソースコードをコピーし、それをテキストエディタにぺたりと貼って、 Teng （のプラグインとしての体裁を整えながら、それ）に持って行ってみたら、なんということか、あっけなく動いてしまったではありませんか。</p>

<p>これはまさしく、 &ldquo;軽量な ORM&rdquo; という売り文句、その思想を裏切らない柔軟かつシンプルな設計の賜物に違いありません。</p>

<p>じぶんは名前空間を変えたことと、メソッド名を <code>resultset</code> から <code>query</code> へと変更したこと以外は、殆ど何もいじらずにその機能を手に入れることができました。そしてその成果を Teng プラグインとしてまとめました。</p>

<p><a href="https://github.com/hiroaki/Teng-Plugin-QueryBuilder">Teng-Plugin-QueryBuilder</a></p>

<p>SQL 実行後に返却されるイテレータが DBIx::Skinny と Teng とでは、その機能が若干異なるので完璧とまでは言えませんが、それはプラグインの範疇を超えるところです。クエリ・ビルダとしては DBIx::Skinny のオリジナルと比較しても遜色無いでしょう（そう、コピペですから）。</p>

<h2>展望</h2>

<p>DBIx::Skinny から Teng へ移植することは、これでできそうです。この先もまだ気づいていない問題が出ないとも限らないので油断はできませんが、どんな課題が出ようとも、じぶんが ORM に求めていた &ldquo;生 SQL&rdquo; を書かずにいられるという最大の要件を満たすことと比較すれば些細なことに過ぎないので、まずは御の字といったところでしょうか。</p>

<p>しかしながら、この Teng についてですが、じつは別の方面での心配が、まだあります。</p>

<p>DBIx::Skinny と比較して「将来性のあるほうを選択することに疑う余地はありませんでした。」と上に述べたところでしたが、 Teng 自身も現在の状況を見るに、あまりその将来性が芳しくありません。これはじぶんの主観なのですが、そのいちばんの根拠は、 Teng のメイン・リポジトリである Github のプロジェクト・ページを覗いたところでは、 ISSUE はあれども活動がほとんど止まっている状況に見えることです。これが意味することは、言うまでもないでしょう。ただ、そもそも Teng ばかりでなくその土台である Perl のいまある状況こそ気がかりにせざるをえない、とも言えるのかもしれません。</p>

<p>そのような現実に直面しながら、その上でなおツールの移植を考えるならば、まずは Perl から脱することを最初に検討するべきなのかもしれません。しかしながら、じぶんの目下の取り組みは、プライベートなツールです。責任のある仕事じゃありませんから、ならば、書いていて楽しい Perl で続けるのがいいに決まっていますから、そういったネガティブな状況についてシリアスに考えることは余計なことなのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MIME::Expander 0.02 is released]]></title>
    <link href="http://hiroaki.github.io/blog/2015/0205/mime-expander-v0-dot-02-is-released/"/>
    <updated>2015-02-05T21:50:00+09:00</updated>
    <id>http://hiroaki.github.io/blog/2015/0205/mime-expander-v0-dot-02-is-released</id>
    <content type="html"><![CDATA[<p>Perl でメールを扱うときには、じぶんはたいてい <a href="http://search.cpan.org/dist/Email-MIME/">Email::MIME</a> を利用します。これだけで間に合っているので、ほかとの比較もべつにしていないのですが、特に添付ファイル付きのメールを扱う時に、各パートに簡単にアクセスできるのが重宝します。</p>

<p>さて、ときに、そうして取り出した添付ファイル、専門用語的には MIME パートと言うでしょうか、現実的には、それらは圧縮されたアーカイブだったりするのが常ではないでしょうか。すると、各パートを取り出したあとに、それらを展開（解凍）しなければなりません。しなければならない、ということは必ずしもありませんが、まあ、展開しますよね。</p>

<p>そのいつものひと手間をも惜しむらく、あるとき、モジュールにするべく取り組んだのですが、その成果が <a href="http://search.cpan.org/dist/MIME-Expander/">MIME::Expander</a> というユーティリティ・モジュールになりました。これをちょっとだけ紹介します。</p>

<!-- more -->


<p>POD に書いた英語は翻訳サイトに掛けたでたらめなものなので、あまり読んでほしくないのですが、そこにはいろいろのメソッドがざっと並んではいるものの、使うのは <code>walk</code> メソッドになります。</p>

<p>その動きは基本的に <code>Email::MIME</code> の <code>walk_parts</code> メソッドのようなイメージになります。 <code>walk_parts</code> メソッドは、自身のメッセージの各パートをめぐり、パートごとにコールバック・ルーチンを走らせます。</p>

<p>例えば、 <code>A.txt</code> と <code>B.txt</code> 二つがアーカイブされた <code>C.zip</code> という添付ファイルがひとつ付いた、 <code>D.eml</code> というメッセージがあるとします。</p>

<p><code>D.eml</code> を、 <code>Email::MIME</code> の <code>walk_parts</code> メソッドで処理すると、コールバックには本体の <code>D.eml</code> 自体のパートと、いわゆる添付ファイルである <code>C.zip</code> を持ったパートが渡ってくるので、実装者はそらが ZIP アーカイブであることを確認し、展開しなければなりません。しなければならない、ということは必ずしもありませんが、まあ。</p>

<pre><code>my $em = Email::MIME-&gt;new("D.eml");
$em-&gt;walk_parts(sub {
  my $part = shift;
  if( $part-&gt;content_type =~ m[application/(x-)?zip(-compressed)?]i ){
    # ZIP に違いない
    my $uzip = IO::Uncompress::Unzip-&gt;new(...);
    $unzip-&gt;...;
    ...
    ...
  }
});
</code></pre>

<p><code>MIME::Expander</code> の <code>walk</code> メソッドではその手間を省きます。</p>

<p>その callback ルーチンには、 <code>A.txt</code> と <code>B.txt</code> と、それぞれを持った単体のパートが渡ってきます（加えて <code>D.eml</code> 自体のパート）。 <code>C.zip</code> のパート自体は用無しなので、渡ってきません。</p>

<pre><code>my $me = MIME::Expander-&gt;new;
$me-&gt;walk("D.eml", sub {
  my $part = shift; # is an instance of Email::MIME
  $part-&gt;body;      # A.txt, B.txt, D.eml
  ...
});
</code></pre>

<p>このように、<code>MIME::Expander</code> ではひとつのパートをコールバックへ渡す前に、展開可能であれば、それを展開し、幾つかのファイルになったそれぞれを、単体の <code>Email::MIME</code> パートに包んで、それらをコールバックに渡します。</p>

<p>現在は、つぎのアーカイブ形式を自動的に展開します。</p>

<ul>
<li>application/bzip2</li>
<li>application/gzip</li>
<li>application/tar</li>
<li>application/zip</li>
<li>message/rfc822</li>
<li>multipart/mixed</li>
</ul>


<p>末尾の二つはアーカイブではありませんが、似たようなものなので（？）同じように取り扱います。また、入れ子になったアーカイブも、アーカイブでなくなるまで再帰的に展開しようとします。そしてもし、たとえば ZIP ファイルそのものが欲しい時は、オプションを指定することによって、 ZIP は展開しない、といった動きもできるように、しました。</p>

<pre><code>my $me = MIME::Expander-&gt;new({ expects =&gt; ['application/zip'] });
</code></pre>

<p>ほかにもオプションはありますが、些細なことなので端折ります──。</p>

<p>さて、こうしていちおうは形になって、じぶんがふだん扱う範囲ではうまく動いているのですが、しかし白状すると、内部で行っている MIME タイプの判定にちょっと不安があります。</p>

<p>ファイル・タイプの判定自体は外部の Perl モジュール（現在は <a href="http://search.cpan.org/dist/File-MMagic/">File::MMagic</a> ）に任せているのではありますが、ほかいくつかの異なる判定モジュール（ <a href="http://search.cpan.org/dist/File-MimeInfo/">File::MimeInfo</a> と <a href="http://search.cpan.org/dist/File-LibMagic/">File::LibMagic</a> と）で異なる結果が得られたりするんです。たとえば上にさりげなさそうに例示しました Content-type を正規表現で判定しているところがあるのですが、そのとおり一口に ZIP といっても <code>application/zip</code> だったり <code>application/x-zip</code> だったり、はたまた <code>application/x-zip-compressed</code> だったり&hellip; 。まったく違うとまでは至らずとも、こうした些細な違いがちらほらあります。</p>

<p>MIME の仕様をしっかり理解できていないせいであるという自省はありながらも、じっさいどうなの？　という猜疑心もちょっとあったりします。今後、そのあたりを整理できるとよいのですが、──願わくば、このあたりの事情に明るい諸先生方の目に触れることによって、「これじゃいかん」といったご指摘をいただけたらなと思う所存であります。</p>

<p>オチも含めてお粗末ではありますが <a href="http://search.cpan.org/dist/MIME-Expander/">MIME::Expander</a> の紹介でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install shared-mime-info on OS X Yosemite]]></title>
    <link href="http://hiroaki.github.io/blog/2014/1227/install-shared-mime-info-on-os-x-yosemite/"/>
    <updated>2014-12-27T21:02:00+09:00</updated>
    <id>http://hiroaki.github.io/blog/2014/1227/install-shared-mime-info-on-os-x-yosemite</id>
    <content type="html"><![CDATA[<p>任意のファイルの種類が何であるかを特定したいとき、その拡張子で判断してしまうようなお人好しでない限り、話はそう簡単ではありません。</p>

<!-- more -->


<p>簡単ではないので理由は端折りますが、実装するには Perl ではモジュール <a href="http://search.cpan.org/dist/File-MimeInfo/">File-MimeInfo</a> を用いるところへ落ち着くと思われます。 Ruby だと <a href="https://rubygems.org/gems/mimemagic">mimemagic</a> かしら。</p>

<p>しかしそれらが有効に働くには、 <a href="http://freedesktop.org/wiki/Software/shared-mime-info/">shared-mime-info</a> というパッケージが、そこに入っていなければなりません（追記： <code>mimemagic</code> では不要でした。 gem のライブラリに Magic データを持っていました）。それは何かというと──冒頭の一文を引用します：</p>

<blockquote><p>The shared-mime-info package contains the core database of common types and the update-mime-database command used to extend it.</p></blockquote>

<p>つまり、ファイルの種類のデータベースですね。</p>

<p>ところで、じぶんの環境は OS X (Yosemite) であります。先に言って仕舞えば、ここには <code>shared-mime-info</code> はありません。したがって、たとえば Perl のそのモジュールをインストールして、こんなふうに実行したところで、むなしい結果を得ることとなります（なりました）。</p>

<pre><code>$ perl -MFile::MimeInfo -E 'say mimetype(shift)' ~/Desktop/IMG_4494.PNG 
WARNING: You don't seem to have a mime-info database. The
shared-mime-info package is available from http://freedesktop.org/ .
application/octet-stream
$ 
</code></pre>

<p>打ち明けると、逆にこのことから、ああ <code>shared-mime-info</code> というのが別途必要なんだなということに気づいたのですけれども、さて、ではインストールしよう、となるのは自然な成り行きになるのですが、しかしこれが結構ハマってしまったので、こうしてメモして残そうと思うに至った次第です。</p>

<p>しかしお断りですが、それは局所的・限定的なプロブレムに対する対処療法の一種で、前向きに捉えればある意味「旬」なものではありますが、おそらくほとんどのひとには役に立つものではありませんし、じぶんの環境ですら腐りやすい、そういう内容になっていますので、どうか悪しからず。</p>

<p>──その手順は、試行錯誤してインストールに成功した時までの走り書きメモをまとめて、バッチ・スクリプトにして、 Gist に置きました。スクリプトと言うと偉そうですが、見ると分かるとおり、チェックとか、エラー処理とかまったくしていないので、これをそのまま使うのはどうかと思います。ので、見るだけにして実行はしないでください。</p>

<p><a href="https://gist.github.com/hiroaki/655b2e22b24fc0bdc05f">install-shared-mime-info.sh</a></p>

<p>ハマリ・ポイント（ hummerly point &hellip; ）は、本丸 <code>shared-mime-info</code> のビルドです。</p>

<p><code>configure</code> 自体は成功裏に終わったので、では続いて <code>make</code> とするのですがこんなエラーに遭遇しました。要約すると、コマンド <code>xgettext</code> がないぜ、と言われています：</p>

<pre><code>$ PKG_CONFIG=$PREFIX/bin/pkg-config PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig ./configure --prefix=$PREFIX
$ make
  GEN      create-pot
INTLTOOL_EXTRACT="$PREFIX/bin/intltool-extract" XGETTEXT=":" srcdir=. $PREFIX/bin/intltool-update --gettext-package shared-mime-info --pot
Can't exec ":": No such file or directory at $PREFIX/bin/intltool-update line 713.
Use of uninitialized value $version in pattern match (m//) at $PREFIX/bin/intltool-update line 714.
 *** GNU xgettext is not found on this system!
 *** Without it, intltool-update can not extract strings.
...
...
make[1]: *** [check] Error 1
make: *** [check-recursive] Error 1
$ 
</code></pre>

<p>このメッセージから直接は読み取れませんが、 <code>intltool</code> をインストールした際に入ったコマンド <code>intltool-update</code> が Perl スクリプトなのでその中を見ることができたのでそれ見てみると、 <code>intltool-update</code> を実行する際に <code>xgettext</code> の情報を正しく渡していない <code>Makefile</code> が悪いとわかります。そして <code>Makefile</code> が悪いなら、それを生成する <code>configure</code> に問題がある、と捜査の手は進みます。</p>

<p>記憶を過去に辿ってみれば、 <code>configure</code> を実行したときには、コマンド <code>xgettext</code> が見つかっている旨が表示されているのですが（実際 <code>PATH</code> も通っています）、しかし現実として生成された <code>Makefile</code> の中では、（それが見つかっていなかったときの意味だろうと思うのですが、） <code>:</code> という何もしないコマンドとして記録されていました。従って、 <code>intltool-update</code> はそれを <code>xgettext</code> とみなして実行したので、 <code>Can't exec ":": No such file or directory</code> というエラーメッセージになり、なるほど辻褄が合うようです。──合ったところで、解決には繋がっていませんが、ちょっと気持ちがすっきりしました。</p>

<p>結局どうしたかというと、 <code>intltool-update</code> を手動で実行しました。これが、どういうことなのかは知りませんが、とりあえずインストールするのが目的になっているので、知らないまま先に進めます。</p>

<p>具体的には、実行されてエラーになったコマンドラインから <code>XGETTEXT=":"</code> のところを削ってしまえば、コマンド・サーチ・パスにある <code>xgettext</code> コマンドが <code>intltool-update</code> 内部から使われる手筈になっていましたので、そうしました。ちなみに、その場で実行したら <code>po</code> ディレクトリに移ってやりなさいという親切なメッセージが出てきたので、それに従い。そして、 <code>make</code> の続きをやり直します。</p>

<pre><code>$ cd po
$ INTLTOOL_EXTRACT="$PREFIX/bin/intltool-extract" srcdir=. $PREFIX/bin/intltool-update --gettext-package shared-mime-info --pot
$ cd ..
$ make
$ make install
</code></pre>

<p>望むらくば <code>configure</code> スクリプトを見直したりするべきなのかもしれませんが、それを追求するのはまた別の話になります。今回はただ、ファイルの種類を特定したいのが目的であるのですから、ツールのビルドの問題に対しては、これで十分のような気がします。尤も、その手腕を持たないじぶんの言い訳なのではありますが、次に示すように、望むべく結果を得ることができたのですから、その場しのぎにしては良い案配ではないでしょうか：</p>

<pre><code>$ XDG_DATA_DIRS=$PREFIX/share perl -mFile::MimeInfo::Magic=magic -E 'say magic(shift)' ~/Desktop/IMG_4494.PNG
image/png
$ 
</code></pre>

<p>以上のように、じぶんの場合、任意のファイルの種類が何であるかを特定したいとき、話はそう簡単なことではなかった、という話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net::NicoVideo 0.28 is released]]></title>
    <link href="http://hiroaki.github.io/blog/2013/1104/released-net-nicovideo-v0-dot-28/"/>
    <updated>2013-11-04T17:19:00+09:00</updated>
    <id>http://hiroaki.github.io/blog/2013/1104/released-net-nicovideo-v0-dot-28</id>
    <content type="html"><![CDATA[<p>Perl でニコニコ動画のサイトへアクセスするためのモジュール Net::NicoVideo をアップデートしました。（バージョン 0.28 です）</p>

<p><a href="http://search.cpan.org/dist/Net-NicoVideo/">http://search.cpan.org/dist/Net-NicoVideo/</a></p>

<!-- more -->


<p>なんでもサイトのバージョンがこれまでの &ldquo;原宿&rdquo; から &ldquo;GINZA&rdquo; に変わるとのことで、これでモジュールも使えなくなってしまうんだろうな、書き直しだな、<del>面倒</del>大変だな、と早合点して半ば諦めかけていましたが、結局の所 &ldquo;GINZA&rdquo; といっても動画を観るページの &ldquo;ガワ&rdquo; にちょっと手が入っただけのことのようで、 Net::NicoVideo （をはじめとして、市井にひろがる数多のプログラム）が実装しているアクセスの手続き、仕組み、たとえばタグ検索で RSS を得るだとか thumbinfo を fetch して parse するだとかの仕組みは、従来どおり通じるようです。</p>

<p>しかし、これはまったくじぶんがいけないのですが、肝心の動画を観るページの解析の実装が安易すぎたため、脆くもそのページの解析に失敗してしまっていました。もう少し注意していれば、モジュールに手入れは不要なくらいな些細な所でした。それを、このバージョンで修復しています。</p>

<p>尤も、いくつか TODO にしていた内部の実装にも手を入れて、少しは見通し易くなったとも思います。それは Net::NicoVideo::Response と Net::NicoVideo::Content のところですが、いままでコンテンツの内容も Response が扱っていましたが、 Content のほうにあるべきなので、移しました。ただし、フロントエンドの Net::NicoVideo のインスタンスを扱うクライアントは気にしなくていい所です。</p>

<p>それから samples フォルダの中のスクリプトも見直しました。──テストの t が乏しいかわりに、この samples にあるスクリプトを全部動かしてテストはしています。本来 t のほうを充実させるべきなのですが、なかなか捗りません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Carton bundles a carton]]></title>
    <link href="http://hiroaki.github.io/blog/2013/0926/the-carton-bundled-a-carton/"/>
    <updated>2013-09-26T23:31:00+09:00</updated>
    <id>http://hiroaki.github.io/blog/2013/0926/the-carton-bundled-a-carton</id>
    <content type="html"><![CDATA[<p>先日書きました Carton そのもののインストールについて、それ自身が依存するモジュールが多すぎて大変、という内容の記事でしたが、そのつぶやきを Carton 作者の @miyagawa 氏が拾って下さり、じぶんの不明を正して下さいました。</p>

<p><code>carton bundle</code> を実行してバンドルされた（モジュールのソースが集められた） vendor ディレクトリの中には、 carton コマンド（スクリプト）が同梱されます！ vendor/bin ディレクトリを覗いてみて下さい。</p>

<!-- more -->


<p>そのスクリプトは Carton 配布とは違うものではあるのですが、これを使えば別途 Carton 配布を用意して＋ビルドして＋インストールしなくても、バンドルされたすべてのモジュールをインストールすることが出来ます。</p>

<p>方やもう一件、 JPA の @lestrrat 氏からも CPAN のミラーをローカルホスト上に作るのはどうかという旨のコメントを頂きました。いつも使うモジュールを集めておいたり、リポジトリにさまざまな Perl のプロジェクトがあってモジュールの管理を一括したいようなときに、これも知っておくべき手段ではないでしょうか。</p>

<p>ただ先日書いたじぶんの記事では明らかではありませんでしたが、実際の問題として、じぶんはお客さんのところに設置することを想定していました。</p>

<p>そこは外界へのネットワークもなく、かつツールを置く自由に望みが薄い厳しいところです。挙げ句にじぶんは、モジュールのバージョンをインストール順に書き込んだバッチスクリプト作成という not good な方向を突っ走ってしまっていたのですが、そのような塞がった環境では、 Carton の &ldquo;bundle&rdquo; による機能がアドバンテージを遺憾なく発揮する事でしょう。</p>

<p>詳細については @miyagawa 氏の記事が上がっていますので、そちらを参照下さればと思います。（もしかしたら迷える私のようなユーザのために書いて下さった？としたらまったく有難い事です。ありがとうございます）</p>

<p><a href="http://weblog.bulknews.net/post/62299851941/miyagawa-cpan-module-bootstrap">miyagawa/cpan-module-bootstrap - Tatsuhiko Miyagawa&rsquo;s blog</a></p>

<p>Carton ──時事ネタ的に言えば、なんておもてなしが行き届いていることでしょう。</p>

<p>少し大袈裟な物言いかもしれませんが、 Carton は Perl の今後を左右しかねない革命的なツールだとじぶんは思っています。尤もその始まりは Ruby の Bundler の存在があってのことでもあったのかも知れませんが、それ同等の環境が整ったことは Perl にとって──一般的には廃れてしまったと認知されていることを否めない Perl にとって、これからもモダンであり実用可能であることの必要条件だったのではないでしょうか。逆に厳しい目で見れば、いままでそのような環境が整っていなかったのは不幸だったと思います。</p>

<p>たとえばある言語をこれから初めて使ってみよう思うデベロッパ・ユーザが、（依存モジュールが多くて）何回も make しないと使えない環境下でそのモジュールが使えるようになるまでのストレスを想像できますでしょうか。本番環境に持って行った時にバージョンが違っていたらどうしようという心配は誰もしていないのでしょうか。 Ruby には Bundler がありました。</p>

<p>でもこれからの Perl には Carton があるのです。</p>
]]></content>
  </entry>
  
</feed>
