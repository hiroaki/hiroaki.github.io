<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | What hwat?]]></title>
  <link href="http://hiroaki.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://hiroaki.github.io/"/>
  <updated>2016-01-08T00:54:59+09:00</updated>
  <id>http://hiroaki.github.io/</id>
  <author>
    <name><![CDATA[hiroaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DrawerCSS]]></title>
    <link href="http://hiroaki.github.io/blog/2015/0808/drawercss/"/>
    <updated>2015-08-08T00:44:00+09:00</updated>
    <id>http://hiroaki.github.io/blog/2015/0808/drawercss</id>
    <content type="html"><![CDATA[<p>進捗は捗々しくないながらも <a href="https://github.com/hiroaki/maps.gpx">maps.gpx</a> はまだまだ改修しておる最中ですが、そんな中、いろいろなクラスを設計したり実装したり、している部分のうちには、その部分単独でも独立したライブラリとして仕上げられるものは、仕上げているつもりで、そうしたものは別のリポジトリにして管理しているものもあります。今回はそのひとつ DrawerCSS と名付けてしまったそれについて、紹介します。</p>

<p><a href="https://github.com/hiroaki/DrawerCSS">DrawerCSS</a></p>

<p>これはひとことで云えば、 HTML ページ（任意のブロック要素）に Drawer （ドロワー、引き出し）を簡単につけるための JavaScript のクラスです。名前に CSS と付けているのは、 CSS3 の機能を用いた実装だからです。</p>

<p>しかしながら、これを使おうとする際には CSS を記述する必要はありません。このクラスのインスタンスが自律的に CSS を操作して、しかるべき動作をするようになっています。（尤も、 CSS を記述する際の制約はあります。）</p>

<p>百聞は一見に如かず、今回はデモを用意したので、そちらを参照してみてください。「コンテンツ」部分をクリックすると開閉します。また HTML ソースを覗いてみてください。</p>

<p><a href="http://hiroaki.github.io/projects/drawercss/sample.html">DrawerCSS demo - basic</a></p>

<!-- more -->


<h2>経緯</h2>

<p>かつて、といってもつい最近までのことですが、ドロワーを実装しようとした時には jQuery Mobile (jqm) を利用していました。ドロワーの動きに初めて触れたのがそれだったがためですが、ほかにライブラリがないかなと探した時にも、──いくつか試してみたのですが、どうも動きがいただけないものばかりで、結局 jqm を利用することになってました。</p>

<p>しかしながら jqm は、なんというか、誤解を恐れず言って仕舞えば、じぶんにとって &ldquo;オワコン&rdquo; なものであり、またドロワー以外の部分は必要がないにもかかわらず、 jqm をロードするがためにほかのライブラリと影響し合ってしまったりするので、できれば使いたくありませんでした。</p>

<p>それからしばらく時を経て。いま maps.gpx を拡張していくにあたり、再び、使いやすくて動きがクールなドロワーはないものかと探してみたところ、じぶんはようやく CSS だけでドロワーを実装できるということを知ったのでした。</p>

<p>で、話がまた長くなるのでこれ以上は省きますが、 Web 検索の上位に出てくる幾つかは試してみたものの、結局は納得のいくものが得られなかったため、では自作にチャレンジしてみようと相成ったのでした。</p>

<h2>特徴</h2>

<p>コンセプトとしては、やはり「シンプル」ということに尽きます。そのためにも、この DrawerCSS の JavaScript ソースファイル <code>drawer-css.js</code> 以外に必要なものはありません。</p>

<p>そのソースの特徴のほうなのですが、まあこれは、見よう見まね、 CSS についての確たる知識も無い中トライ＆エラーでやっているので、エレガンスとは程遠いかもしれませんが、おかげで見通しがよく理解がしやすいかとも思います。これはだいじなことなのですが、数ヶ月先のじぶんが、ソースだけを見て思い出せるものでなければなりません。</p>

<p>そして機能の特徴のほうですが、──正直なところ世にあるドロワーのライブラリよりは少ないです。たとえば開いたドロワーのエッジに影をつけたりとかいうのは、今後頑張ってみるかもしれませんが、いまはありません。</p>

<p>ただ一点だけ、ほかに無い？特徴があり、それは、任意のブロック要素についてドロワーを付けられるという点です。一般的にドロワーというと、ヴューポートのサイズでそれを動かしますが、 DrawerCSS は、ベースとなるブロック要素を指定して、そのブロック要素の枠組み（タテ・ヨコ）の中で、ドロワーを開閉することができます。</p>

<h2>デモンストレーション</h2>

<p>もちろん、任意のブロック要素ならば、ビューポートのタテ・ヨコの幅全体サイズでのドロワーもできます。これは次のデモを参照してください：</p>

<p><a href="http://hiroaki.github.io/projects/drawercss/sample-map-fullscreen.html">DrawerCSS demo - fullscreen</a></p>

<p>このデモでは別の意味もあって、 Google Maps API は、その要素のスタイルを、なんらかの状態に変化さているかもしれませんが、それとは衝突することなく、この DrawerCSS が使えることを示しています。</p>

<p>そもそも DrawerCSS は maps.gpx の制作中から派生しているものなので、 Google Maps API に影響を及ぼすようでは使い物にはなりません。そのことから、地図付きのデモ、というかテスト・ページになっています。</p>

<p>また地図はフルスクリーンではないかもしれないので、その場合でも意図したとおりに動作するかをチェックするためのデモが次です：</p>

<p><a href="http://hiroaki.github.io/projects/drawercss/sample-map.html">DrawerCSS demo - map</a></p>

<p>いずれのデモも地図をクリックすることで開閉します。</p>

<p>そして、現在のバージョンでサポートしているオプションの値を、さまざまに変更しながらその効果を試すことができるようにしたページが次です。 API ドキュメントと併せて見てみてください：</p>

<p><a href="http://hiroaki.github.io/projects/drawercss/sample-advanced.html">DrawerCSS demo - advanced</a></p>

<h2>使い方</h2>

<p>クラス <code>DrawerCSS</code> の API は<a href="https://github.com/hiroaki/DrawerCSS">プロジェクトのページ</a>にある README を参照してください。</p>

<p>尤もそこの英語文はちょっと怪しいので、ここに解説を述べることにして、 DrawerCSS の紹介を終えることにしたいと思います。</p>

<h3>HTML とスタイル</h3>

<p>DrawerCSS が操作対象とする要素には、主体となる要素と、ドロワーとなる要素とがあります。前者を base 、後者を drawer と呼ぶことにしています。</p>

<p>drawer 要素はページのどこに記述しても構いません。クラス <code>DrawerCSS</code> のインスタンスを作成すると、暗黙のうちにしかるべき位置へ移動させられます。（実は、要素を書かなくても構わないのですが、そのことについては割愛します。）</p>

<p>そして、それらを包むべくブロック要素（コンテナ）があるはずです。もし、無いと思っても、 BODY 要素があります。そのコンテナのサイズを決めてください。そのサイズに base 要素と drawer 要素は影響されます。もし、 BODY 要素がコンテナならば、そのサイズはタテ・ヨコ共に 100% とします（注意：その際は HTML 要素についても 100% を記述することが必要かもしれません）。</p>

<p>具体例は、これまでに示した各デモ・ページのソースを見てみてください。</p>

<h3>スクリプト</h3>

<p>クラス <code>DrawerCSS</code> のコンストラクタに、 base 要素と drawer 要素それぞれの ID を渡して、インスタンスを作成します。</p>

<pre><code>var dr = new DrawerCSS('base-id', 'drawer-id');
</code></pre>

<h4>オプション</h4>

<p>三番目の引数にハッシュ型のオプションを渡すと、効果をカスタマイズできます。</p>

<p>すべてのオプションのデフォルト値を明示的に指定すると次のようになります：</p>

<pre><code>var dr = new DrawerCSS('base-id', 'drawer-id', {
  side: 'LEFT',
  span: '80%',
  effect: 'slide',
  duration: 0.3,
  delay: 0.0,
  timingFunction: 'ease-in-out'
  });
</code></pre>

<h5>side</h5>

<p>ドロワーの位置はオプション <code>side</code> に、 <code>TOP</code> 、 <code>RIGHT</code> 、 <code>BOTTOM</code> 、 <code>LEFT</code> のうちいずれかを指定します。</p>

<pre><code>var dr = new DrawerCSS('base-id', 'drawer-id', { side: 'BOTTOM' });
</code></pre>

<h5>span</h5>

<p>開き具合（ drawer 要素の幅）はオプション <code>span</code> です。値はピクセル px やパーセンテージ % などといった、 CSS のサイズを表現するときの単位で指定します。</p>

<pre><code>var dr = new DrawerCSS('base-id', 'drawer-id', { span: '200px' });
</code></pre>

<h5>effect</h5>

<p>開き方のオプション <code>effect</code> には、現在は２種類あります。</p>

<p>デフォルトの値 <code>slide</code> は、ドロワーが開いた時に、 base 要素を押し出すような形でアニメーションします。このとき、 base 要素のサイズは変化せず、コンテナからはみ出す形になります。</p>

<p>そして値 <code>compress</code> は、 base 要素がコンテナからはみ出すことはなく、かわりにサイズが縮められます。</p>

<pre><code>var dr = new DrawerCSS('base-id', 'drawer-id', { effect: 'compress' });
</code></pre>

<p>なお、はみ出すぶぶんについては、 base 要素の CSS プロパティ <code>overflow</code> にセットする値で振る舞い（見え方）を変えることができます。具体的には <code>scroll</code> や <code>hidden</code> などを、ページのデザインに応じてセットしておきます。</p>

<h5>アニメーションに関係するオプション</h5>

<p>ドロワーの開閉時のアニメーションのパラメータについては、 <code>delay</code>、<code>duration</code> および <code>timingFunction</code> があります。これらについては、 CSS の transition のことなので、 CSS のドキュメントを参照してください。</p>

<h4>インスタンス・メソッド</h4>

<p>ドロワーの開閉は、インスタンスを作成したのち、インスタンス・メソッド <code>open()</code> 、 <code>close()</code> および <code>toggle()</code> で行います。いずれも受け取る引数はありません：</p>

<pre><code>dr.toggle();
</code></pre>

<p>メソッド <code>toggle()</code> を使った場合、その結果、ドロワーが開いた状態になった場合は <code>true</code> を、そうでなければ <code>false</code> を返します。</p>

<p>その他いくつかのメソッドがありますが、主なものはこれで十分かと思います。詳しくは API ドキュメントを参照してください。</p>
]]></content>
  </entry>
  
</feed>
